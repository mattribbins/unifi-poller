# Default values for unifi-poller.
---
replicaCount: 1

image:
  repository: golift/unifi-poller
  tag: v2.11.2
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10010
  runAsGroup: 10010
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 9130
  annotations: {}

pod:
  annotations: {}
  labels: {}

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: unifi-poller.local
      paths: []

  tls: []
  #  - secretName: unifi-poller-tls
  #    hosts:
  #      - unifi-poller.local

resources:
  limits:
    cpu: 0.3
    memory: 64Mi
  requests:
    cpu: 0.05
    memory: 32Mi

serviceMonitor:
    enabled: true
    scrapeInterval: 30s

nodeSelector: {}

tolerations: []

affinity: {}

envFromConfigMap: {}

envFromSecrets: {}

config:
  poller:
    # config.poller.debug -- Turns on line numbers, microsecond logging, and a per-device log.
    # This may be noisy if you have a lot of devices. It adds one line per device.
    debug: false

    # config.poller.quiet -- Turns off per-interval logs. Only startup and error logs will be emitted.
    # Recommend enabling debug with this setting for better error logging.
    quiet: false

    # config.poller.plugins -- Load dynamic plugins. Advanced use; only sample mysql plugin provided by default.
    plugins: []

  prometheus:
    # config.prometheus.disable -- Disable prometheus output
    # https://unpoller.com/docs/dependencies/prometheus
    disable: false
    # config.prometheus.http_listen -- IP and port /metrics is exported to.
    http_listen: "0.0.0.0:9130"
    # config.prometheus.requests --
    report_errors: false

  influxdb:
    # config.influxdb.disable -- Disable influxdb output
    # https://unpoller.com/docs/dependencies/influxdb
    # Warning: Do not use InfluxDB 2.0 or greater at this time.
    # There are no pre-built graphs to display the data it collects.
    disable: true
    # config.influxdb.interval --
    interval: "30s"
    # config.influxdb.url -- InfluxDB does not require auth by default, so the user/password are probably unimportant.
    url: "http://127.0.0.1:8086"
    # config.influxdb.user -- Strongly advise putting this in the config file, refer to SECRETS.md
    user: "unifipoller"
    # config.influxdb.pass -- Strongly advise putting this in the config file, refer to SECRETS.md
    pass: "unifipoller"
    # config.influxdb.pass -- Be sure to create this database.
    db: "unifi"
    # config.influxdb.verify_ssl --  The UniFi Controller only updates traffic stats about every 30 seconds.
    # Setting this to something lower may lead to "zeros" in your data.
    # If you're getting zeros now, set this to "1m"
    verify_ssl: false

  loki:
    # config.loki.disable -- Disables loki output
    # Enabling will push UniFi's Events, Anomalies, Alarms and IDS data to Loki.
    # https://unpoller.com/docs/dependencies/loki
    disable: false
    # config.loki.url
    url: "http://127.0.0.1:3100"
    # config.loki.user -- Basic auth username
    # Note: only basic auth is supported at present
    user: "loki"
    # config.loki.pass -- Basic auth password. Strongly advise putting this in the config file, refer to SECRETS.md
    pass: "loki"
    # config.loki.verify_ssl -- Enable verification of SSL cert
    verify_ssl: false
    # config.loki.tenant_id -- Loki tenant ID, alternative to basic auth
    tenant_id: ""
    # config.loki.interval -- Polling interval.
    # The recommended interval is 2m but anything from 1m to 15m should work fine
    interval: "2m"
    # config.loki.timeout -- Timeout period. Adjust if errors start appearing
    timeout: "10s"

  webserver:
    # config.webserver.enable -- Enables the built in web server and API. Advanced use, see wiki
    # https://unpoller.com/docs/advanced/API
    enable: false
    # config.webserver.port -- Port for the webserver
    port: 37288
    # config.webserver.html_path -- HTML web path, should not require changing
    html_path: "/usr/local/lib/unpoller/web"
    # config.webserver.ssl_cert_path -- Path of the SSL certificate
    ssl_cert_path: ""
    # config.webserver.ssl_key_path -- Path of the SSL private key
    ssl_key_path: ""
    # config.webserver.max-events -- The max_events setting controls memory usage.
    # For small or home sites you can safely set this to 1000 or higher.
    # This setting dictates how many logs are kept in memory.
    # The setting is a global setting that applies to all log queues. There are several log queues per plugin.
    max_events: 200
    # config.webserver.accounts -- Web server accounts. Captain is the default provider user, change!!
    # Passwords are hashed and generated via the command `unpoller -e -`
    # If commented out, authentication is disabled
    accounts:
      captain: "$2a$04$mxw6i0LKH6u46oaLK2cq5eCTAAFkfNiRpzNbz.EyvJZZWNa2FzIlS"

  unifi:
    # config.unifi.dynamic -- Setting this to true and providing default credentials allows you to skip
    # configuring controllers in this config file. Instead you configure them in
    # your prometheus.yml config. Prometheus then sends the controller URL to
    # unifi-poller when it performs the scrape. This is useful if you have many,
    # or changing controllers. Most people can leave this off. See wiki for more.
    dynamic: false
    # config.unifi.defaults -- The following section contains the default credentials/configuration for any
    # dynamic controller (see above section), or the primary controller if you do not
    # provide one and dynamic is disabled. In other words, you can just add your
    # controller here and delete the following section.
    defaults:
      # config.unifi.defaults.role -- Friendly name used in dashboards. Uses URL if left empty; which is fine.
      # Avoid changing this later because it will live forever in your database.
      # Multiple controllers may share a role. This allows grouping during scrapes.
      role: "main controller"
      # config.unifi.defaults.role -- Username to talk to unifi. Strongly advise putting this in the config file, refer to SECRETS.md
      user: "unifipoller"
      # config.unifi.defaults.pass -- Password to talk to unifi. Strongly advise putting this in the config file, refer to SECRETS.md
      pass: "unifipoller"
      # config.unifi.defaults.url -- Url to talk to unifi
      url: "https://127.0.0.1:8443"

      # config.unifi.defaults.sites -- If the controller has more than one site, specify which sites to poll here.
      # Set this to ["default"] to poll only the first site on the controller.
      # A setting of ["all"] will poll all sites; this works if you only have 1 site too.
      sites:
        - all

      # config.unifi.defaults.verify_ssl -- If your UniFi controller has a valid SSL certificate (like lets encrypt),
      # you can enable this option to validate it. Otherwise, any SSL certificate is
      # valid. If you don't know if you have a valid SSL cert, then you don't have one
      verify_ssl: false
      # config.unifi.defaults.save_ids -- Enable collection of Intrusion Detection System Data (InfluxDB / Loki only).
      # Only useful if IDS or IPS are enabled on one of the sites.
      save_ids: false
      # config.unifi.defaults.save_events -- Enable collection of events (InfluxDB / Loki only)
      save_events: false
      # config.unifi.defaults.save_alarms -- Enable collection of alarms (InfluxDB / Loki only)
      save_alarms: false
      # config.unifi.defaults.save_anomalies -- Enable collection of anomalies (InfluxDB / Loki only)
      save_anomalies: false
      # config.unifi.defaults.save_dpi -- Enable collection of Deep Packet Inspection data. This data breaks down
      # traffic types for each client and site, it powers a dedicated DPI dashboard.
      # Enabling this adds roughly 150 data points per client.  That's 6000 metrics for
      # 40 clients.  This adds a little bit of poller run time per interval and causes
      # more API requests to your controller(s). Don't let these "cons" sway you:
      # it's cool data. Please provide feedback on your experience with this feature.
      save_dpi: false

      # config.unifi.defaults.save_sites -- Enable collection of site data. This data powers the Network Sites
      # dashboard. It's not valuable to everyone and setting this to false will save resources.
      save_sites: true

    # config.unifi.controllers -- Repeat any controllers like default above
    controllers: []
